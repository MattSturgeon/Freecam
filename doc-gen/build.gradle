import org.apache.commons.io.FilenameUtils

dependencies {
    // Depend on ":common" so we can build docs from its classes,
    // we also get Minecraft classes from the root buildscript's `subprojects` block.
    implementation project(path: ":common", configuration: "namedElements")
}

def genTask = tasks.register("generate") {
    group = "documentation"
    description = "Generate project documentation"
}

project(":common")
        .file("src/main/resources/assets/freecam/lang")
        .listFiles()
        .each { json ->
            def lang = FilenameUtils.getBaseName json.name

            // Runs the main sourceSet, outputs generated docs in build/docs
            def task = tasks.register("generate_${lang}", JavaExec) {
                group = "documentation"
                description = "Generate project documentation for $lang"

                classpath = sourceSets.main.runtimeClasspath
                mainClass = "net.xolt.freecam.docgen.Main"
                workingDir = layout.projectDirectory.dir("run").asFile
                doFirst { workingDir.mkdirs() }

                def outputDir = layout.buildDirectory.dir "docs/${lang}"
                outputs.dir outputDir
                outputs.upToDateWhen { false }

                def assets = project(":common").file("src/main/resources/assets").toPath()
                def minecraftVersion = loom.minecraftVersion
                def minecraftAssets = loom.files.userCache.toPath().resolve("assets")
                def assetIndex = loom.minecraftProvider.versionInfo.assetIndex().fabricId(minecraftVersion)

                args = [
                        "--assetIndex", assetIndex,
                        "--assetsDir", minecraftAssets.toAbsolutePath(),
                        "--modAssetsDir", assets.toAbsolutePath(),
                        "--buildDir", outputDir.get().asFile.absolutePath,
                        "--lang", lang
                ]
            }

            genTask.configure { dependsOn task }
        }
